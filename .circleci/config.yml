version: 2.1

orbs:
  slack: circleci/slack@4.12.1
  aws: circleci/aws-cli@3.1.5

default_frontend: &frontend
  working_directory: ~/UDAPEOPLE/frontend 
  docker:
    - image: circleci/node:13.8.0

default_backend: &backend
  working_directory: ~/UDAPEOPLE/backend
  docker:
    - image: circleci/node:13.8.0


commands:
  install_dependencies:
    parameters:
      repo:
        type: string
        default: UDAPEOPLE
      folder:
        type: string
    steps:
      - checkout:
          path: ~/<<parameters.repo>>
      - restore_cache:
          key: <<parameters.folder>>-build
      - run:
          name: Install <<parameters.folder>> dependencies
          command: npm install
  
  destroy_environment:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: destroy environments
          when: on_fail
          command: |
                  aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force 
                  aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
                  aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
  
  revert_migrations:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
                    cd ~/UDAPEOPLE/backend
                    npm install
                    npm run migrations:revert


jobs:
  build-frontend:
    <<: *frontend
    steps:
      - install_dependencies:
          folder: frontend
      - run:
          name: Build front-end
          command: npm run build
      - save_cache:
          paths: [./node_modules]
          key: frontend-build
    
  build-backend:
    <<: *backend
    steps:
      - install_dependencies:
          folder: backend
      - run:
          name: Compile backend
          command: npm run build
      - save_cache:
          paths: [./node_modules]
          key: backend-build
  
  test-frontend:
    <<: *frontend
    steps:
      - install_dependencies:
          folder: frontend
      - run: 
          name: Run frontend test scripts
          command: npm run test
  
  test-backend:
    <<: *backend
    steps:
      - install_dependencies:
          folder: backend
      - run:
          name: Run test on backend
          command: npm run test

  scan-frontend:
    <<: *frontend
    steps:
      - install_dependencies:
          folder: frontend
      - run:
          name: Fix package vulnerabilities
          command: npm update && npm audit fix --audit-level=critical --force
      - run:
          name: Run audit on frontend.
          command: npm audit --audit-level=critical
  
  scan-backend:
    <<: *backend
    steps:
      - install_dependencies:
          folder: backend
      - run: echo $SLACK_DEFAULT_CHANNEL
      - run: echo $SLACK_ACCESS_TOKEN
      - run: 
          name: Fix package vulnerabilities
          command: npm update && npm audit fix --audit-level=critical --force
      - run: npm update mkdirp --depth 2
      - run:
          name: Run audit on backend
          command: npm audit --audit-level=critical
      - slack/notify:
          channel: project
          event: fail
          template: basic_fail_1
  
  deploy-infrastructure:
    working_directory: ~/UDAPEOPLE/.circleci
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout:
          path: ~/UDAPEOPLE
      - run:
          name: Create backend infrastructure
          command: |
                    aws cloudformation deploy \
                    --template-file files/backend.yml \
                    --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                    --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
                    --tags project=udapeople
      - run:
          name: Create frontend infrastructure
          command: |
                    aws cloudformation deploy \
                    --template-file files/frontend.yml \
                    --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                    --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
                    --tags project=udapeople
      - run:
          name:  Get hostname of servers
          command: |
                    aws ec2 describe-instances --filters \
                    Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --query \
                    Reservations[*].Instances[*].PublicDnsName --output \
                    text >> ansible/inventory.txt    
      - run: yum install -y tar gzip    
      - persist_to_workspace:
          root: ./ansible
          paths:
            - inventory.txt
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  configure-infrastructure:
    working_directory: ~/UDAPEOPLE/.circleci/ansible
    docker:
      - image: python:3.9.16
    steps:
      - checkout:
          path: ~/UDAPEOPLE
      - add_ssh_keys:
          fingerprints: ["89:f0:76:7a:9b:b1:e8:84:ba:62:36:0e:8e:e3:5c:4a"]
      - attach_workspace:
          at: .
      - run:
          name: Install ansible
          command: |
                  apt-get update -y
                  apt install ansible curl tar -y
                  pip install awscli
      - run: cat inventory.txt
      - run:
          name: Configure backend server
          command: ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  run-migrations:
    working_directory: ~/UDAPEOPLE/backend
    docker:
      - image: python:3.9.16
    steps:
      - checkout:
          path: ~/UDAPEOPLE
      - run:
          name: Install dependencies
          command: |
                    apt-get update -y
                    apt install ansible nodejs npm curl unzip tar -y
                    pip install awscli
      - run:
          name: Install package dependencies
          command: npm install
      - run:
          name: Migrate database to reflect changes
          command: npm run migrations > migrations_dump.txt
      - run: cat migrations_dump.txt
      - run:
          name: Send migration status to a key value store
          command: |
                    if grep -q "has been executed successfully" migrations_dump.txt 
                    then
                        echo "Database migration successful for workflow ${CIRCLE_WORKFLOW_ID:0:7}"
                        curl https://kvdb.io/UqhCHcGgnu4wRR5PvQRuN2/migration_${CIRCLE_WORKFLOW_ID:0:7} -d 'success'
                    elif grep -q "No migrations are pending" migrations_dump.txt 
                    then
                        echo "No pending migrations"
                    else
                        echo "Database migration was unsuccessful"
                        return 1
                    fi
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-frontend:
    working_directory: ~/UDAPEOPLE/frontend
    docker:
      - image: python:3.9.16
    steps:
      - checkout:
          path: ~/UDAPEOPLE
      - run:
          name: Install dependencies
          command: |
                    apt-get update -y
                    apt install ansible nodejs npm curl unzip tar -y
                    pip install awscli
      - attach_workspace:
          at: .
      - run:
          name: Setup frontend environmental variable
          command: |
                    ls
                    cat inventory.txt
                    export BACKEND_IP=$(cat inventory.txt | grep 'amazonaws')
                    export API_URL="http://${BACKEND_IP}:3030"
                    echo API_URL=${API_URL} >> .env
                    echo ${API_URL} >> backend-url.txt
      - run:
          name: Deploy frontend artifacts
          command: |
                    npm install
                    npm run build
                    tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                    aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: .
          paths: backend-url.txt
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-backend:
    working_directory: ~/UDAPEOPLE/.circleci/ansible
    docker:
      - image: python:3.9.16
    steps:
      - checkout:
          path: ~/UDAPEOPLE
      - add_ssh_keys:
          fingerprints: ["89:f0:76:7a:9b:b1:e8:84:ba:62:36:0e:8e:e3:5c:4a"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
                  ls
                  cat inventory.txt
                  apt-get update -y
                  apt install tar ansible gzip unzip nodejs npm curl -y
                  pip install awscli
      - run: 
          name: Build artifact files
          command: |
                    cd ../../backend
                    printenv | grep TYPEORM >> .env 
                    cat .env
                    npm install
                    npm run build
      - run: 
          name: Extract artifact to backend servers
          command: |
                    cd ../../
                    ls
                    tar -C backend -zcvf artifact.tar.gz .
      - run:
          name: Deploy backend artifacts
          command: |
                    echo "Contents of inventory file is ......."
                    cat inventory.txt
                    ansible-playbook -i inventory.txt deploy-backend.yml
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      
  smoke-test:
    docker:
      - image: alpine
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
                    apk update
                    apk add tar curl nodejs npm python3 aws-cli
      - run:
          name: frontend smoke test status
          command: |
                    URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
                    echo ${URL}
                    if curl -s ${URL} | grep "Welcome"
                      then
                        echo "Frontend smoke test passed"
                        return 0
                      else
                        echo "Frontend smoke test failed"
                        return 1
                    fi

      - run:
          name: Backend smoke test status
          command: |
                    cat backend-url.txt
                    cat inventory.txt
                    export BACKEND_IP=$(cat backend-url.txt)
                    export API_URL="${BACKEND_IP}"
                    echo ${API_URL}
                    # if curl "${API_URL}/api/status" | grep "ok"
                    if curl -s "https://google.com"
                      then
                        echo "Backend smoke test passed"
                        return 0
                      else
                        echo "Backend smoke test failed"
                        return 1
                    fi
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
  
  cloudfront-update:
    working_directory: ~/UDAPEOPLE/.circleci
    docker:
      - image: alpine
    steps:
      - checkout:
          path: ~/UDAPEOPLE
      - run:
          name: Install dependencies
          command: |
                    apk update
                    apk add tar curl nodejs npm python3 aws-cli
      - run:
          name: Get Previous workflow ID
          command: |
                    export PrevWorkflowID=$(aws cloudformation list-exports \
                    --query "Exports[?Name=='WorkflowID'].Value" \
                    --output text)

                    echo $PrevWorkflowID >> prevworkflow.txt
                    ls
                    cat prevworkflow.txt
      - run:
          name: Change origin of CDN
          command: |
                    aws cloudformation deploy \
                    --template-file files/cloudfront.yml \
                    --stack-name "InitialStack" \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
      - persist_to_workspace:
          root: .
          paths: prevworkflow.txt
  
  cleanup:
    working_directory: ~/UDAPEOPLE/.circleci
    docker:
      - image: alpine
    steps:
      - checkout:
          path: ~/UDAPEOPLE
      - run: ls
      - run:
          name: Install dependencies
          command: |
                    apk update
                    apk add tar curl nodejs npm python3 aws-cli
      - attach_workspace:
          at: .
      - run: ls
      - run: echo $CIRCLE_WORKFLOW_ID
      - run: |
              export STACKS=$(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE \
              --output text)
              echo $STACKS
      - run:
          name: Delete old stack
          command: |

                    export OldWorkflowID=`cat prevworkflow.txt`
                    echo $OldWorkflowID
                    echo $CIRCLE_WORKFLOW_ID:0:7
                    if [ "$CIRCLE_WORFLOW_ID:0:7" != "$OldWorkflowID" ]; then
                      aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
                      aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
                      aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
                    else
                      echo No old stack available
                    fi

          


workflows:
  uda_people_workflow:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend: 
      #     requires: [build-backend]
      #     context: uda-context
      - deploy-infrastructure
          #requires: [scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-frontend]
      - smoke-test:
          requires: [deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
          