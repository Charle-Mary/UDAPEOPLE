version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

orbs:
  slack: circleci/slack@4.12.1
  aws: circleci/aws-cli@3.1.5

default_frontend: &frontend
  working_directory: ~/UDAPEOPLE/frontend 
  docker:
    - image: circleci/node:13.8.0

default_backend: &backend
  working_directory: ~/UDAPEOPLE/backend
  docker:
    - image: circleci/node:13.8.0


commands:
  install_dependencies:
    parameters:
      repo:
        type: string
        default: UDAPEOPLE
      folder:
        type: string
    steps:
      - checkout:
          path: ~/<<parameters.repo>>
      - restore_cache:
          key: <<parameters.folder>>-build
      - run:
          name: Install <<parameters.folder>> dependencies
          command: npm install
  
  destroy_environment:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: destroy environments
          when: on_fail
          command: |
                  aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
                  aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>


jobs:
  build-frontend:
    <<: *frontend
    steps:
      - install_dependencies:
          folder: frontend
      - run:
          name: Build front-end
          command: npm run build
      - save_cache:
          paths: [./node_modules]
          key: frontend-build
    
  build-backend:
    <<: *backend
    steps:
      - install_dependencies:
          folder: backend
      - run:
          name: Compile backend
          command: npm run build
      - save_cache:
          paths: [./node_modules]
          key: backend-build
  
  test-frontend:
    <<: *frontend
    steps:
      - install_dependencies:
          folder: frontend
      - run: 
          name: Run frontend test scripts
          command: npm run test
  
  test-backend:
    <<: *backend
    steps:
      - install_dependencies:
          folder: backend
      - run:
          name: Run test on backend
          command: npm run test

  scan-frontend:
    <<: *frontend
    steps:
      - install_dependencies:
          folder: frontend
      - run:
          name: Fix package vulnerabilities
          command: npm update && npm audit fix --audit-level=critical --force
      - run:
          name: Run audit on frontend.
          command: npm audit --audit-level=critical
  
  scan-backend:
    <<: *backend
    steps:
      - install_dependencies:
          folder: backend
      - run: echo $SLACK_DEFAULT_CHANNEL
      - run: echo $SLACK_ACCESS_TOKEN
      - run: 
          name: Fix package vulnerabilities
          command: npm update && npm audit fix --audit-level=critical --force
      - run: npm update mkdirp --depth 2
      - run:
          name: Run audit on backend
          command: npm audit --audit-level=critical
      - slack/notify:
          channel: project
          event: fail
          template: basic_fail_1
  
  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Create backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-west-2 \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend ip and url
          working_directory: ./.circleci/ansible
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo [ubuntu]$'\n'$BACKEND_IP > inventory.txt
            echo http://$BACKEND_IP:3030 > backend-url.txt
            cat inventory.txt
            cat backend-url.txt
      - run:
          name: Create frontend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-west-2 \
              --tags project=udapeople
            echo "created bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: yum install -y tar gzip
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
            - .circleci/ansible/backend-url.txt
      # - destroy-environment:
      #     run_id: ${RUN_ID:0:7}
  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [89:f0:76:7a:9b:b1:e8:84:ba:62:36:0e:8e:e3:5c:4a]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # - destroy-environment:
      #     run_id: ${RUN_ID:0:7}
  
  # deploy-infrastructure:
  #   working_directory: ~/UDAPEOPLE/.circleci
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout:
  #         path: ~/UDAPEOPLE
  #     - run:
  #         name: Create backend infrastructure
  #         command: |
  #                   aws cloudformation deploy \
  #                   --template-file files/backend.yml \
  #                   --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
  #                   --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
  #                   --tags project=udapeople
  #     - run:
  #         name: Create frontend infrastructure
  #         command: |
  #                   aws cloudformation deploy \
  #                   --template-file files/frontend.yml \
  #                   --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
  #                   --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
  #                   --tags project=udapeople
  #     - run:
  #         name:  Get hostname of servers
  #         command: |
  #                   aws ec2 describe-instances --filters \
  #                   Name=tag:project,Values=udapeople --query \
  #                   Reservations[*].Instances[*].PublicIpAddress --output \
  #                   text >> ansible/inventory.txt    
  #     - run: yum install -y tar gzip     
  #     - persist_to_workspace:
  #         root: ./ansible
  #         paths:
  #           - inventory.txt
  #     - destroy_environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  # configure-infrastructure:
  #   working_directory: ~/UDAPEOPLE/.circleci/ansible
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout:
  #         path: ~/UDAPEOPLE
  #     - add_ssh_keys:
  #         fingerprints: [89:f0:76:7a:9b:b1:e8:84:ba:62:36:0e:8e:e3:5c:4a]
  #     - attach_workspace:
  #         at: /usr/local
  #     - run:
  #         name: Install ansible
  #         command: |
  #                 apk update
  #                 apk add ansible
  #                 ansible --version
  #     - run: cat /usr/local/ansible/inventory.txt
  #     - run:
  #         name: Configure backend server
  #         command: ansible-playbook -i /usr/local/ansible/inventory.txt configure-server.yml




workflows:
  uda_people_workflow:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend: 
      #     requires: [build-backend]
      #     context: uda-context
      - deploy-infrastructure:
          context: uda-context
          #requires: [scan-frontend, scan-backend]
      - configure-infrastructure:
          context: uda-context
          requires: [deploy-infrastructure]
          