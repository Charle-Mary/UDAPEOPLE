version: 2.1

orbs:
  slack: circleci/slack@4.12.1

default_frontend: &frontend
  working_directory: ~/UDAPEOPLE/frontend 
  docker:
    - image: circleci/node:13.8.0

default_backend: &backend
  working_directory: ~/UDAPEOPLE/backend
  docker:
    - image: circleci/node:13.8.0


commands:
  install_dependencies:
    parameters:
      repo:
        type: string
        default: UDAPEOPLE
      folder:
        type: string
    steps:
      - checkout:
          path: ~/<<parameters.repo>>
      - restore_cache:
          key: <<parameters.folder>>-build
      - run:
          name: Install <<parameters.folder>> dependencies
          command: npm install
  
  destroy_environment:
    parameters:
      stack-name:
        type: string
    steps:
      - run:
          name: destroy environments
          command: aws cloudformation delete-stack \
                    --stack-name <<parameters.stack-name>>


jobs:
  build-frontend:
    <<: *frontend
    steps:
      - install_dependencies:
          folder: frontend
      - run:
          name: Build front-end
          command: npm run build
      - save_cache:
          paths: [./node_modules]
          key: frontend-build
    
  build-backend:
    <<: *backend
    steps:
      - install_dependencies:
          folder: backend
      - run:
          name: Compile backend
          command: npm run build
      - save_cache:
          paths: [./node_modules]
          key: backend-build
  
  test-frontend:
    <<: *frontend
    steps:
      - install_dependencies:
          folder: frontend
      - run: 
          name: Run frontend test scripts
          command: npm run test
  
  test-backend:
    <<: *backend
    steps:
      - install_dependencies:
          folder: backend
      - run:
          name: Run test on backend
          command: npm run test

  scan-frontend:
    <<: *frontend
    steps:
      - install_dependencies:
          folder: frontend
      - run:
          name: Fix package vulnerabilities
          command: npm update && npm audit fix --audit-level=critical --force
      - run:
          name: Run audit on frontend.
          command: npm audit --audit-level=critical
  
  scan-backend:
    <<: *backend
    steps:
      - install_dependencies:
          folder: backend
      - run: echo $SLACK_DEFAULT_CHANNEL
      - run: echo $SLACK_ACCESS_TOKEN
      - run: 
          name: Fix package vulnerabilities
          command: npm update && npm audit fix --audit-level=critical --force
      - run: npm update mkdirp --depth 2
      - run:
          name: Run audit on backend
          command: npm audit --audit-level=critical
      - slack/notify:
          channel: project
          event: fail
          template: basic_fail_1
  
  deploy-infrastructure:
    working_directory: ~/UDAPEOPLE/.circleci
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout:
          path: ~/UDAPEOPLE
      # - run:
      #     name: Install tar and gzip
      #     command: apt install tar gzip
      - run:
          name: Create backend infrastructure
          command: |
                    aws cloudformation deploy \
                    --template-file files/backend.yml \
                    --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                    --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
                    --tags project=udapeople
      - run:
          name: Create frontend infrastructure
          command: |
                    aws cloudformation deploy \
                    --template-file files/frontend.yml \
                    --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                    --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
                    --tags project=udapeople
      - run:
          name:  Get hostname of servers
          command: |
                    aws ec2 describe-instances --filters \
                    Name=tag:project,Values=udapeople --query \
                    Reservations[*].Instances[*].PublicDnsName --output \
                    text >> ansible/inventory.txt         
      - persist_to_workspace:
          root: /tmp/
          paths:
            - inventory.txt

  configure-infrastructure:
    machine:
      image: ubuntu-2004:current
      resource_class: medium
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 89:f0:76:7a:9b:b1:e8:84:ba:62:36:0e:8e:e3:5c:4a
      - attach_workspace:
          at: /tmp/
      - run:
          name: Install dependencies
          command: |
                  sudo apt-get unzip curl
                  sudo apt-add-repository ppa:ansible/ansible
                  sudo apt install ansible
                  ansible --version
                  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                  unzip awscliv2.zip
                  sudo ./aws/install
                  aws --version





workflows:
  uda_people_workflow:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend: 
      #     requires: [build-backend]
      #     context: uda-context
      # - deploy-infrastructure:
      #     context: uda-context
          #requires: [scan-frontend, scan-backend]
      - configure-infrastructure:
          context: uda-context
          